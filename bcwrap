#!/usr/bin/env python

import json, subprocess, os, re, argparse
from pathlib import Path

parser = argparse.ArgumentParser(description='Wrapper around AtelierB\'s bcomp.')
parser.add_argument('filename', metavar='filename', nargs=1, help='The component to be checked')

def get_path(include,basename):
    fn = Path(basename)
    if fn.exists():
        return fn
    else:
        for dir in include:
            fn = Path(dir,basename)
            if fn.exists():
                return fn
    return Path(basename)

def read_config(parents):
    data = None
    for parent in parents:
        config_file = Path(parent,'bcwrap.json')
        if config_file.exists():
            json_data=open(config_file).read() # FIXME
            try:
                data = json.loads(json_data)
                config_file_dir = parent
            except JSONDecodeError:
                print("bcwrap.json is not a valid json file.")
                exit(1)
            break
    if data is None:
        print("No bcwrap.json file found.")
        exit(1)
    else:
        result = {}
        # bcomp
        if "bcomp" in data:
            bcomp_path = Path(str(data["bcomp"]))
            if bcomp_path.is_absolute():
                bcomp = bcomp_path.resolve(strict=True)
            else:
                bcomp = Path(config_file_dir,bcomp_path).resolve(strict=True)
            result["bcomp"] = str(bcomp)
        else:
            print("Missing field 'bcomp' in bcwrap.json.")
            exit(1)

        # resource
        if "resource" in data:
            resource_path = Path(str(data["resource"]))
            if resource_path.is_absolute():
                resource = resource_path.resolve(strict=True)
            else:
                resource = Path(config_file_dir,resource_path).resolve(strict=True)
            result["resource"] = str(resource)
        else:
            atb_file = Path(bcomp.parent,"..","..","AtelierB").resolve(strict=True)
            data["resource"] = str(atb_file)

        # include
        result["include"] = []
        if "include" in data:
            if isinstance(data["include"],list):
                for dir in data["include"]:
                    path = Path(str(dir))
                    if path.is_absolute():
                        fulldir = path.resolve(strict=True)
                    else:
                        fulldir = Path(config_file_dir,path).resolve(strict=True)
                    result["include"].append(fulldir) 
            else:
                print("The field 'include' in bcwrap.json must be a list.")
                exit(1)
        #
        return result

def call_bcomp(bcomp,resource,filename,include):
    bcomp_dir = Path(bcomp).resolve(strict=True).parent
    cmd = [bcomp,"-r",resource,"-a","-i",filename,"-I","."]
    for inc in include:
        cmd += ["-I",inc]
    cmd_env = os.environ.copy()
    if "LD_LIBRARY_PATH" in cmd_env:
        cmd_env["LD_LIBRARY_PATH"] = bcomp_dir + ":" + cmd_env["LD_LIBRARY_PATH"]
    else:
        cmd_env["LD_LIBRARY_PATH"] = bcomp_dir
    return subprocess.run(cmd, stderr=subprocess.PIPE,env=cmd_env,encoding="latin1") # FIXME encoding

def main():
    args = parser.parse_args()
    try:
        fn = args.filename[0]
        p = Path(fn).resolve(strict=True)
        data = read_config(p.parents)
        bcomp_res = call_bcomp(data["bcomp"],data["resource"],fn,data["include"])
        lines = bcomp_res.stderr.splitlines()
        pattern = re.compile("([^:]*)(:[0-9]+:[0-9]+:.*)")
        for line in lines:
            match = pattern.fullmatch(line)
            if match is None:
                break
            path = get_path(data["include"],match.group(1))
            print(str(path) + match.group(2))
                
    except FileNotFoundError as exn:
        print(exn)
        exit(1)

if __name__ == '__main__':
    main()
